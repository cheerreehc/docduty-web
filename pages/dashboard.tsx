// pages/dashboard.tsx
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { format, parseISO, isAfter } from 'date-fns';
import Header from '@/components/Header';
import { useUser } from '@/contexts/UserContext';
import { createClient } from '@/utils/supabase/client';
import { GetServerSideProps } from 'next';
import { createServerSupabaseClient } from '@/utils/supabase/server';

// ‡πÄ‡∏û‡∏¥‡πà‡∏° Type ‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ï‡πâ‡∏ô‡∏¥‡∏¢‡∏≤‡∏° GetServerSideProps
type Invitation = {
  workspace_id: string;
  workspace_name: string;
  member_id: string;
};

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const supabase = createServerSupabaseClient(ctx);

  const {
    data: { user },
  } = await supabase.auth.getUser();

  console.log('‚úÖ SSR session user:', user?.id)

  if (!user) {
    return {
      redirect: {
        destination: '/signin?redirectedFrom=/dashboard',
        permanent: false,
      },
    };
  }

  return {
    props: {},
  };
};

export default function DashboardPage() {
  const router = useRouter();
  const { profile, loading, isSessionLoading } = useUser();
  // const [shifts, setShifts] = useState<any[]>([]);
  const [workspaceName, setWorkspaceName] = useState<string | null>(null);
  const supabase = createClient();

  const [invitation, setInvitation] = useState<Invitation | null>(null);
  const [isAccepting, setIsAccepting] = useState(false);

  const handleAcceptInvitation = async () => {
  if (!invitation) return;

  setIsAccepting(true);
  
  // üëá ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å RPC Function ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
  const { error } = await supabase.rpc('accept_invitation', {
      invite_id: invitation.member_id
    });

    if (error) {
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç: ' + error.message);
    } else {
      alert('‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Workspace ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤...');
      window.location.reload();
    }
    setIsAccepting(false);
  };

  useEffect(() => {
    if (!loading && !isSessionLoading && profile === null) {
      router.push('/signin?redirectedFrom=/dashboard');
    }
  }, [profile, loading, isSessionLoading]);

  // useEffect(() => {
  //   async function loadData() {
  //     if (!profile) return;

  //     // const { data: userShifts } = await supabase
  //     //   .from('shifts')
  //     //   .select('date, duty_type')
  //     //   .contains('doctor_ids', [profile.id])
  //     //   .order('date', { ascending: true });

  //     // setShifts(userShifts || []);

  //     const { data: member } = await supabase
  //       .from('members')
  //       .select('workspace_id')
  //       .eq('user_id', profile.id)
  //       .single();

  //     if (member?.workspace_id) {
  //       const { data: workspace } = await supabase
  //         .from('workspaces')
  //         .select('name')
  //         .eq('id', member.workspace_id)
  //         .single();

  //       if (workspace?.name) {
  //         setWorkspaceName(workspace.name);
  //       }
  //     }
  //   }

  //   loadData();
  // }, [profile, supabase]);

  useEffect(() => {
    async function loadData() {
      if (!profile) return;

      // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤ user ‡πÄ‡∏õ‡πá‡∏ô member ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const { data: member } = await supabase
        .from('members')
        .select('workspace_id, workspaces(name)') // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡πÄ‡∏•‡∏¢‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        .eq('user_id', profile.id)
        .maybeSingle(); // ‡πÉ‡∏ä‡πâ maybeSingle ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error

      if (member && member.workspaces) {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤ workspaces ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const ws = Array.isArray(member.workspaces) ? member.workspaces[0] : member.workspaces;
          
          // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ name ‡∏à‡∏≤‡∏Å object ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
          setWorkspaceName(ws?.name ?? null);
        } else {
        // üëá *** ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ *** üëá
        // 2. ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô member ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
        const { data: pendingInvite } = await supabase.rpc('get_pending_invitation');

        if (pendingInvite && pendingInvite.length > 0) {
          setInvitation(pendingInvite[0]);
        }
      }
    }

    loadData();
  }, [profile, supabase]);

  if (loading || !profile) return <p className="p-6">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>;

  const today = new Date();
  // const nextShift = shifts.find((shift) => isAfter(parseISO(shift.date), today));

  return (
    <div className="min-h-screen bg-[#F7FCFD]">
      <Header />
      <div className="max-w-3xl mx-auto pt-32 px-4">
        <div className="bg-white rounded-xl shadow-lg p-6 space-y-6">
          <h1 className="text-2xl font-bold text-[#00677F]">‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö üëã</h1>
          <p className="text-gray-700">‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•: <strong>{profile.email}</strong></p>

          {/* ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Workspace ‡πÅ‡∏•‡∏∞ Invitation */}
          {workspaceName ? (
            // Case 1: User ‡∏°‡∏µ Workspace ‡πÅ‡∏•‡πâ‡∏ß
            <p className="text-sm text-gray-500">Workspace: <strong>{workspaceName}</strong></p>
          ) : invitation ? (
            // Case 2: User ‡πÑ‡∏°‡πà‡∏°‡∏µ Workspace ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
            <div className="mt-6 p-4 border border-green-300 bg-green-50 rounded-lg text-sm text-green-900">
              <p className="font-semibold">‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Workspace "{invitation.workspace_name}"</p>
              <button
                onClick={handleAcceptInvitation}
                disabled={isAccepting}
                className="mt-3 bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition"
              >
                {isAccepting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°...' : '‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç'}
              </button>
            </div>
          ) : (
            // Case 3: User ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢
            <div className="mt-6 p-4 border border-yellow-300 bg-yellow-50 rounded-lg text-sm text-yellow-900">
              <p>‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° workspace ‡πÉ‡∏î‡πÄ‡∏•‡∏¢</p>
              <button
                onClick={() => router.push('/create-workspace')}
                className="mt-3 bg-[#008191] text-white px-4 py-2 rounded hover:bg-[#015A66] transition"
              >
                + ‡∏™‡∏£‡πâ‡∏≤‡∏á workspace ‡πÉ‡∏´‡∏°‡πà
              </button>
            </div>
          )}
          {/* END of ‡∏™‡πà‡∏ß‡∏ô Workspace */}
  
        </div>
      </div>

      <ToastContainer
        position="bottom-center"
        autoClose={1800}
        hideProgressBar={false}
        closeOnClick
        pauseOnHover
        draggable
        theme="colored"
      />
    </div>
  );
}
